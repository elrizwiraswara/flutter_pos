// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_pos/test/data/repositories/storage_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_pos/core/common/result.dart' as _i5;
import 'package:flutter_pos/core/services/connectivity/ping_service.dart'
    as _i2;
import 'package:flutter_pos/data/datasources/remote/storage_remote_datasource_impl.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakePingData_0 extends _i1.SmartFake implements _i2.PingData {
  _FakePingData_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPingService extends _i1.Mock implements _i2.PingService {
  MockPingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i3.Future<void> startPing({
    String? host = '8.8.8.8',
    int? count,
    int? interval = 1,
    int? maxPingLatencyTolerance = 400,
    int? pingLatencyToleranceCount = 3,
    int? maxLines = 100,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startPing, [], {
              #host: host,
              #count: count,
              #interval: interval,
              #maxPingLatencyTolerance: maxPingLatencyTolerance,
              #pingLatencyToleranceCount: pingLatencyToleranceCount,
              #maxLines: maxLines,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void addListener(dynamic Function(List<int>, List<String>)? listener) =>
      super.noSuchMethod(
        Invocation.method(#addListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(dynamic Function(List<int>, List<String>)? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void clearListeners() => super.noSuchMethod(
    Invocation.method(#clearListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  void addConnectionStatusListener(dynamic Function(bool)? listener) =>
      super.noSuchMethod(
        Invocation.method(#addConnectionStatusListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void removeConnectionStatusListener(dynamic Function(bool)? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeConnectionStatusListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void clearConnectionStatusListeners() => super.noSuchMethod(
    Invocation.method(#clearConnectionStatusListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopPing() => super.noSuchMethod(
    Invocation.method(#stopPing, []),
    returnValueForMissingStub: null,
  );

  @override
  _i2.PingData parsePingLine(String? line) =>
      (super.noSuchMethod(
            Invocation.method(#parsePingLine, [line]),
            returnValue: _FakePingData_0(
              this,
              Invocation.method(#parsePingLine, [line]),
            ),
          )
          as _i2.PingData);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StorageRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageRemoteDataSourceImpl extends _i1.Mock
    implements _i4.StorageRemoteDataSourceImpl {
  MockStorageRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.Result<String>> uploadUserPhoto(String? imgPath) =>
      (super.noSuchMethod(
            Invocation.method(#uploadUserPhoto, [imgPath]),
            returnValue: _i3.Future<_i5.Result<String>>.value(
              _i6.dummyValue<_i5.Result<String>>(
                this,
                Invocation.method(#uploadUserPhoto, [imgPath]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<String>>);

  @override
  _i3.Future<_i5.Result<String>> uploadProductImage(String? imgPath) =>
      (super.noSuchMethod(
            Invocation.method(#uploadProductImage, [imgPath]),
            returnValue: _i3.Future<_i5.Result<String>>.value(
              _i6.dummyValue<_i5.Result<String>>(
                this,
                Invocation.method(#uploadProductImage, [imgPath]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<String>>);
}
